// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: api/damage.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DamageCalcClient is the client API for DamageCalc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DamageCalcClient interface {
	Attack(ctx context.Context, in *DamageCalcRequest, opts ...grpc.CallOption) (*DamageCalcResponse, error)
}

type damageCalcClient struct {
	cc grpc.ClientConnInterface
}

func NewDamageCalcClient(cc grpc.ClientConnInterface) DamageCalcClient {
	return &damageCalcClient{cc}
}

func (c *damageCalcClient) Attack(ctx context.Context, in *DamageCalcRequest, opts ...grpc.CallOption) (*DamageCalcResponse, error) {
	out := new(DamageCalcResponse)
	err := c.cc.Invoke(ctx, "/damage.DamageCalc/Attack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DamageCalcServer is the server API for DamageCalc service.
// All implementations must embed UnimplementedDamageCalcServer
// for forward compatibility
type DamageCalcServer interface {
	Attack(context.Context, *DamageCalcRequest) (*DamageCalcResponse, error)
	mustEmbedUnimplementedDamageCalcServer()
}

// UnimplementedDamageCalcServer must be embedded to have forward compatible implementations.
type UnimplementedDamageCalcServer struct {
}

func (UnimplementedDamageCalcServer) Attack(context.Context, *DamageCalcRequest) (*DamageCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attack not implemented")
}
func (UnimplementedDamageCalcServer) mustEmbedUnimplementedDamageCalcServer() {}

// UnsafeDamageCalcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DamageCalcServer will
// result in compilation errors.
type UnsafeDamageCalcServer interface {
	mustEmbedUnimplementedDamageCalcServer()
}

func RegisterDamageCalcServer(s grpc.ServiceRegistrar, srv DamageCalcServer) {
	s.RegisterService(&DamageCalc_ServiceDesc, srv)
}

func _DamageCalc_Attack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DamageCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DamageCalcServer).Attack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/damage.DamageCalc/Attack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DamageCalcServer).Attack(ctx, req.(*DamageCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DamageCalc_ServiceDesc is the grpc.ServiceDesc for DamageCalc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DamageCalc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "damage.DamageCalc",
	HandlerType: (*DamageCalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attack",
			Handler:    _DamageCalc_Attack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/damage.proto",
}
